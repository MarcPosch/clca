#
# CA configuration
#

# derived paths
CADBDIR=$CA_HOME/ca
CACERT=$CADBDIR/cacert.pem
CAPRIVDIR=$CA_HOME/private
CERTDIR=$CA_HOME/certs
CRLDIR=$CA_HOME/crl

# optional: backup directory


# Define crypto engine to use. Supported values are
# openssl   - OpenSSL software only (private keys stored on disk)
# chil      - nCipher hardware
# gem       - Gemalto Safenet Luna SA hardware
#ENGINE=chil
#ENGINE=gem
ENGINE=openssl

# optional wrapper command for HSM integration into OpenSSL;
# this wrapper is called with the OpenSSL command line invocation
# as argument for private key operations (use with nFast modules)
#HSM_PRELOAD=/opt/nfast/bin/preload

# Path to OpenSSL binary
OPENSSL=/usr/bin/openssl


######################################################################
# Path to OpenSSL configuration
CNF=$CA_HOME/etc/openssl.cnf


######################################################################
# HSM settings
#NFAST_HOME=/opt/nfast

ROOTKEYNAME=rsa-cakey

# By default the CA passphrase is read by the built-in function 
# get_passphrase
# from the terminal.
# In certain cases, e. g. when using a HSM or a software key using a 
# Secret Sharing scheme it is necessary to override this default behviour.
# To do so, define a shell function get_passphrase() that echoes the passphrase.
# example for a static passphrase:
# get_passphrase() {
#    echo "1234"
# }
#
# You can call an external program, e. g. to use Secret Sharing for
# the CA passphrase:
# get_passphrase() {
#    eval `secret get --n 3 --k 2`
#    echo $PASSPHRASE
# }
#
# If you wish to completely disable this mechanism you need to 
# return 1 from the function.
# OpenSSL will then handle password input itself:
# get_passphrase() {
#    return 1
# }
#


######################################################################
# CA settings

# Default CA validity in days (unless specified via --startdate and --enddate)
CA_VALIDITY=3650
